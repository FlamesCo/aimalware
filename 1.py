# Import necessary libraries from PyQt5 for the GUI application
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QLabel,
    QLineEdit, QTextEdit, QProgressBar, QFormLayout
)
from PyQt5.QtCore import pyqtSlot, QThread, pyqtSignal
from subprocess import Popen, PIPE, CalledProcessError

# Thread class for running the ping command in the background
class PingThread(QThread):
    # Signals to communicate with the main thread
    update_output = pyqtSignal(str)
    finished = pyqtSignal()

    # Constructor for the thread, takes the IP address to ping
    def __init__(self, ip):
        QThread.__init__(self)
        self.ip = ip

    # The run method contains the code that gets executed when the thread starts
    def run(self):
        try:
            # Start the ping process
            process = Popen(["ping", "-c", "4", self.ip], stdout=PIPE, stderr=PIPE, universal_newlines=True)
            # Read the output line by line and emit a signal for each line
            while True:
                output = process.stdout.readline()
                if output == '' and process.poll() is not None:
                    break
                if output:
                    self.update_output.emit(output.strip())
            # Wait for the ping process to finish
            process.poll()
        except CalledProcessError as e:
            # Emit any errors that occur
            self.update_output.emit(str(e))
        finally:
            # Signal that the process has finished
            self.finished.emit()

# Main window class for the application
class NetworkStressTester(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()

    # Initialize the UI components
    def initUI(self):
        self.setWindowTitle('Network Stress Tester - Educational Demo')
        self.setGeometry(100, 100, 600, 300)
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)

        # Form layout for the IP input
        form_layout = QFormLayout()
        self.ip_input = QLineEdit(self)
        form_layout.addRow("Target IP/Hostname:", self.ip_input)

        # Button to start the ping test
        self.start_button = QPushButton('Start Ping Test', self)
        self.start_button.clicked.connect(self.startPingTest)

        # Text edit to show the output from the ping test
        self.output_text_edit = QTextEdit(self)
        self.output_text_edit.setReadOnly(True)

        # Progress bar to indicate that the test is running
        self.progress_bar = QProgressBar(self)
        self.progress_bar.setMaximum(0)
        self.progress_bar.setVisible(False)

        # Add widgets to the main layout
        self.main_layout.addLayout(form_layout)
        self.main_layout.addWidget(self.start_button)
        self.main_layout.addWidget(self.output_text_edit)
        self.main_layout.addWidget(self.progress_bar)

    # Slot to handle the start button click
    def startPingTest(self):
        ip = self.ip_input.text()
        self.output_text_edit.clear()
        self.output_text_edit.append("AI ORBIT ION CANNON 0.1 - [C] - Flamescorp" )
        self.progress_bar.setVisible(True)

        # Create and start the ping thread
        self.thread = PingThread(ip)
        self.thread.update_output.connect(self.append_output)
        self.thread.finished.connect(self.pingTestFinished)
        self.thread.start()

    # Slot to append the output from the ping thread to the text edit
    @pyqtSlot(str)
    def append_output(self, data):
        self.output_text_edit.append(data)

    # Slot to handle the completion of the ping test
    @pyqtSlot()
    def pingTestFinished(self):
        self.output_text_edit.append("Ping test finished.")
        self.progress_bar.setVisible(False)

# Main function to start the application
def main():
    app = QApplication(sys.argv)
    ex = NetworkStressTester()
    ex.show()
    sys.exit(app.exec_())

# Check if the script is running directly and not being imported
if __name__ == '__main__':
    main()
